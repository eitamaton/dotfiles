#+title: Emacs Configuration
#+author: Eitan Angel
#+toc: true
#+property: header-args+ :mkdirp yes
#+property: header-args+ :tangle ~/.emacs.d/init.el
#+property: header-args+ :comments no

Inspired by and copied from [[https://jamiecollinson.com/blog/my-emacs-config/][jamie collinson]], [[https://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua]], and [[https://github.com/larstvei/dot-emacs][larstvei]]'s emacs configs.

* Setup

** Preamble

   A notice for the created init.el.

   #+begin_src emacs-lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Warning: Do not edit this file; it is a tangle of ~/dotfiles/dotemacs.org
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   #+end_src
** Package Sources

   Set package repositories. The =package-enable-at-startup= value =nil= prevents a second package load and slightly improves startup time (Jamie Collinson)

   #+begin_src emacs-lisp
(require 'package)
(setq package-enable-at-startup nil)
(setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
			 ("non-gnu" . "https://elpa.nongnu.org/nongnu/")
			 ("melpa" . "https://melpa.org/packages/")))
(package-initialize)
   #+end_src

** Bootstrap use-package

   If [[https://github.com/jwiegley/use-package][=use-package=]] is not installed, then install it.

   #+begin_src emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package)
  (eval-when-compile (require 'use-package)))
   #+end_src

   By default all packages should be installed from the package manager as that's the usual path. This is equivalent to setting =:ensure t= on each call to =use-package=. To disable set =:ensure nil= (this is done automatically for any packages using =:load-path= so shouldn't generally be needed).

   #+begin_src emacs-lisp
(setq use-package-always-ensure t)
   #+end_src

** Benchmark Startup

   =benchmark-init= records startup time by package so we can debug. It only records things after it's initialised, so put as early in config as possible.

   #+begin_src emacs-lisp
(use-package benchmark-init
  :config
  ;; to disable collection of benchmark data after init is done.
  (add-hook 'after-init-hook 'benchmark-init/deactivate))

(add-hook 'after-init-hook
          (lambda () (message "loaded in %s" (emacs-init-time))))
   #+end_src

** Increase Garbage Collector Threshold

   The default garbage collection threshold is 800kB, increase this to 10MB to (potentially) improve startup speed.

   #+begin_src emacs-lisp
(setq gc-cons-threshold 10000000)

;; Restore after startup
(add-hook 'after-init-hook
          (lambda ()
            (setq gc-cons-threshold 1000000)
            (message "gc-cons-threshold restored to %S"
                     gc-cons-threshold)))
   #+end_src

** Edit dotemacs.org

   #+begin_src emacs-lisp
(defun find-config ()
  "Edit dotemacs.org"
  (interactive)
  (find-file "~/dotfiles/dotemacs.org"))

(global-set-key (kbd "C-c I") 'find-config)
   #+end_src

** Set custom settings to load in own file

   This stops emacs adding customised settings to =init.el=. I try to avoid using customize anyway, preferring programmatic control of variables. Creating it as a temporary file effectively disables it (i.e. any changes are session local).

   #+begin_src emacs-lisp
(setq custom-file (make-temp-file "emacs-custom"))
   #+end_src

** Add custom packages to load path

   By default Emacs only includes files directly under =user-emacs-directory= (usually =~/.emacs.d/=), so we need to add any folders containing custom packages.

   I put my scripts under =~/dotfiles/lisp/= and symlink it with =ln -s ~/dotfiles/lisp ~/.emacs.d/lisp=.

   #+begin_src emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lisp/")
   #+end_src

** Record key frequency

   This is useful to find out what I use a lot. I plan to then change bindings to improve ergonomics on commonly used functions.

   #+begin_src emacs-lisp
(use-package keyfreq
  :config
  (keyfreq-mode 1)
  (keyfreq-autosave-mode 1))
   #+end_src

* Preferences

  Don't display the help screen on startup.

  #+begin_src emacs-lisp
(setq inhibit-startup-screen t)
  #+end_src

  Use the desktop library to save the state of Emacs from one session to another.
  #+begin_src emacs-lisp
;;  (setq desktop-path '("." "~/dotfiles"))
;;  (desktop-save-mode t)
  #+end_src

  Let's turn off unwanted window decoration.

  #+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
  #+end_src

  I don't want the error bell.

  #+begin_src emacs-lisp
(setq ring-bell-function 'ignore)
  #+end_src

  Make the =yes or no= prompts shorter.

  #+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
  #+end_src

  Advice on [[https://stackoverflow.com/a/151946][backup file configuration]]. I opt to turn off emacs backups given [[/home/i/dotfiles/backup.org][Borgmatic]].
  
  #+begin_src emacs-lisp
(setq make-backup-files nil)
  #+end_src

  I prefer sentences end with a single space.
  
  #+begin_src emacs-lisp
(setq sentence-end-double-space nil)
  #+end_src

  Using advice from [[https://emacs.stackexchange.com/a/54357][emacs.sx]], give cursor tooltips on org links

  #+begin_src emacs-lisp
(setq help-at-pt-display-when-idle t)
(help-at-pt-set-timer)
  #+end_src
  
** Global Bindings

   I prefer lines to wrap. But org-agenda sometimes does not. So use a binding for visual line mode.

   #+begin_src emacs-lisp
(global-set-key (kbd "C-c v") 'visual-line-mode)
;;  (global-visual-line-mode t)
   #+end_src

  The emacs defaults for other-window, C-x o, and other-frame, C-x 5 o, are undesirable.
  
   #+begin_src emacs-lisp
(global-set-key (kbd "C-;") 'other-window)

(defun prev-window ()
  (interactive)
  (other-window -1))

(global-set-key (kbd "C-x p") 'prev-window)
(global-set-key (kbd "C-:") 'prev-window)

(global-set-key (kbd "C-M-;") 'other-frame)

(defun prev-frame ()
  (interactive)
  (other-frame -1))

(global-set-key (kbd "C-M-:") 'prev-frame)
  #+end_src

   Scroll by line bindings
  
   #+begin_src emacs-lisp
(global-set-key (kbd "M-n") 'scroll-up-line)
(global-set-key (kbd "M-p") 'scroll-down-line)
   #+end_src

   Create new frame

   #+begin_src emacs-lisp
(global-set-key (kbd "s-e") 'make-frame-command)
   #+end_src
  
** Sync-Related

   Leverage org-clock-save and org-clock-load of org-clock.el to sync currently clocked-in task via org-clock-save.el.
   #+begin_src emacs-lisp
;; (defun my-org-clock-save-now ()
;;   "Invoke org-clock-save after resetting org-clock-loaded"
;;   (setq org-clock-loaded nil)
;;   (org-clock-save))
;; 
;; (defun my-org-clock-load-now ()
;;   "Invoke org-clock-load after resetting org-clock-loaded"
;;   (setq org-clock-loaded nil)
;;   (org-clock-load))
;; 
;; (add-hook 'auto-save-hook 'my-org-clock-save-now)
;; (add-hook 'after-revert-hook 'my-org-clock-load-now)
;; more thought about the hook or the org-clock-load function is necessary to prevent the dialog
   #+end_src

   Revert buffers when file changes. Method requires save org buffers on auto-save (moved to [[*Basic Config][Basic Config]]).

   #+begin_src emacs-lisp
;; auto revert mode
(global-auto-revert-mode 1)
;; auto refresh dired when file changes
(add-hook 'dired-mode-hook 'auto-revert-mode)
   #+end_src

* Appearance

  Variables

  #+begin_src emacs-lisp
(require 'color)
(defvar my/default-cursor-region-color (color-lighten-name "magenta" 25))
(defvar i/default-text-height 100)
  #+end_src
  
  cursor and region
  #+begin_src emacs-lisp
(set-face-attribute 'cursor nil :background my/default-cursor-region-color)
(setq-default cursor-type '(hbar . 2))

(set-face-attribute 'region nil :background my/default-cursor-region-color)
  #+end_src

  Set the default font size as in https://stackoverflow.com/a/296316. Compiling emacs using with-x-toolkit=lucid may cause the default font to be too large for unknown reason. Also use default-text-scale to adjust font size across entire frame. The =C-)= binding is thanks to [[https://github.com/purcell/default-text-scale/issues/5#issuecomment-954806709][this comment]] due to a quirk in default-text-scale due to a quirk in emacs described in [[https://github.com/purcell/default-text-scale/issues/5][the issue]].
  
  #+begin_src emacs-lisp
(set-face-attribute 'default nil :height i/default-text-height)

(use-package default-text-scale
  :bind
  (("C-)" . (lambda ()
              (interactive)
              (setq default-text-scale--complement 0)
              (set-face-attribute 'default
                                  nil
                                  :height i/default-text-height)
              (message "Default font size is now %d"
                       (face-attribute 'default :height))))))
  :config
  (default-text-scale-mode 1)
  #+end_src

  Unsuccessful attempt to change Hebrew font size from [[https://emacs.stackexchange.com/questions/53755/increase-the-font-size-for-hebrew-text-in-emacs-but-leave-english-font-size-as-i]].
  
  #+begin_src emacs-lisp
;; (set-fontset-font "fontset-default" 'hebrew (font-spec :size 50))
  #+end_src
  
  New frames should be fullscreen.
  
  #+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(fullscreen . fullboth) '(fullscreen-restore . fullheight))
  #+end_src

  Default theme

  #+begin_src emacs-lisp
(use-package solarized-theme
  :config
  (setq solarized-use-variable-pitch nil)
  (setq solarized-scale-org-headlines nil)
  (load-theme 'solarized-selenized-black t))
  #+end_src

  Emoji! 🎉

  #+begin_src emacs-lisp
(set-fontset-font t 'symbol "Apple Color Emoji")
(set-fontset-font t 'symbol "Noto Color Emoji" nil 'append)
(set-fontset-font t 'symbol "Symbola" nil 'append)
(set-fontset-font t 'symbol "Segoe UI Emoji" nil 'append)
  #+end_src

  zzzzone

  #+begin_src emacs-lisp :tangle no
(use-package zone
  :config
  (zone-when-idle 300))
  #+end_src

  Used to hide or alter minor modes in mode-line.
  
  #+begin_src emacs-lisp
(use-package delight)
  #+end_src

  [[https://github.com/Malabarba/beacon][beacon]] is a cursor locator
  
  #+begin_src emacs-lisp
(use-package beacon
  :pin gnu
  :delight
  :config
  (setq beacon-color my/default-cursor-region-color)
  (beacon-mode 1)
  )
  #+end_src

  [[https://github.com/Malabarba/smart-mode-line][Smart-mode-line]]

  #+begin_src emacs-lisp
;; (use-package smart-mode-line
;;   :config
;;   (sml/setup))
  #+end_src

  [[https://github.com/milkypostman/powerline][powerline (milkypostman)]]
 
  #+begin_src emacs-lisp
;; (use-package powerline
;;   :config
;;   (powerline-center-theme))
  #+end_src

* Interface
** Darkroom

   #+begin_src emacs-lisp
(use-package darkroom
  :bind ("C-c d" . darkroom-mode))
   #+end_src

** Helm

   [[https://emacs-helm.github.io/helm/][=helm=]] is an incremental completion and selection narrowing framework.

   #+begin_src emacs-lisp
(use-package helm
  :ensure t
  :delight
  :init
  (progn
    (require 'helm-config)
    )
  :bind (("M-x" . helm-M-x)
         ("C-x C-f" . helm-find-files)
	 ("C-x b" . helm-buffers-list)
	 ("M-y" . helm-show-kill-ring)))
  :config
  (helm-mode t)
  (setq helm-display-function 'helm-display-buffer-in-own-frame
	helm-display-buffer-reuse-frame t
	helm-use-undecorated-frame-option t)
  (setq helm-truncate-lines t)
   #+end_src

** Which Key

   =which-key= suggests next keys based on the current key combination.

   #+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :delight
  :bind ("C-c w" . which-key-show-top-level)
  :config
					;    (add-hook 'after-init-hook 'which-key-mode)
  (which-key-mode t))
   #+end_src

N** Tree-Like Undo

   =undo-tree= visualises undo history as a tree for easy navigation.

   #+begin_src emacs-lisp
(use-package undo-tree
  :delight
  :config
  (global-undo-tree-mode))
   #+end_src

** Expand Region

   =expand-region= expands the region around the cursor semantically depending on mode. Hard to describe but a killer feature.

   #+begin_src emacs-lisp
(use-package expand-region
  :bind ("C-=" . er/expand-region))
   #+end_src

* Coding
  Also see [[*Org-Babel][Org-Babel]].
** General

   [[https://github.com/Fuco1/smartparens][=smartparens=]] has many features to help balance and traverse delimiters.

   #+begin_src emacs-lisp
(use-package smartparens
  :hook (prog-mode . smartparens-mode)
  :delight
  )
   #+end_src

   Use [[https://github.com/Fanael/rainbow-delimiters][=rainbow-delimiters=]] to highlight delimiters for improved readability.

   #+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode)
  :delight
  )
   #+end_src

   [[http://elpa.gnu.org/packages/rainbow-mode.html][=rainbow-mode=]] colorizes color names in-buffer. =rainbow-x-colors= colorizes color names.

   #+begin_src emacs-lisp
(use-package rainbow-mode
  :hook prog-mode
  :delight
  :config
  (setq rainbow-x-colors nil)
  )
   #+end_src

** Git

   [[https://magit.vc/][=magit=]] is a gorgeous git porcelain for emacs.

   #+begin_src emacs-lisp
(use-package magit
  :bind ("C-x g" . magit-status))
   #+end_src

** Python

   =elpy= is an emacs python development environment.

   #+begin_src emacs-lisp
(use-package elpy
  :ensure t
  :init
  (elpy-enable))
   #+end_src

   #+begin_src emacs-lisp
;; Suppress "Can't guess python-indent-offset, using defaults: 4" message
(setq python-indent-guess-indent-offset-verbose nil)
   #+end_src

** COMMENT Environment Management

   By default Emacs doesn't read from the same environment variables set in your terminal. This package fixes that.

   #+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :config
  (exec-path-from-shell-initialize))
   #+END_SRC

** COMMENT Syntax checking

   =Flycheck= is a general syntax highlighting framework which other packages hook into. It's an improvment on the built in =flymake=.

   Setup is pretty simple - we just enable globally and turn on a custom eslint function, and also add a custom checker for proselint.

   #+begin_src emacs-lisp
(use-package flycheck
  :config
  (add-hook 'after-init-hook 'global-flycheck-mode)
  (add-hook 'flycheck-mode-hook 'jc/use-eslint-from-node-modules)
  (add-to-list 'flycheck-checkers 'proselint)
  (setq-default flycheck-highlighting-mode 'lines)
  ;; Define fringe indicator / warning levels
  (define-fringe-bitmap 'flycheck-fringe-bitmap-ball
    (vector #b00000000
            #b00000000
            #b00000000
            #b00000000
            #b00000000
            #b00000000
            #b00000000
            #b00011100
            #b00111110
            #b00111110
            #b00111110
            #b00011100
            #b00000000
            #b00000000
            #b00000000
            #b00000000
            #b00000000))
  (flycheck-define-error-level 'error
			       :severity 2
			       :overlay-category 'flycheck-error-overlay
			       :fringe-bitmap 'flycheck-fringe-bitmap-ball
			       :fringe-face 'flycheck-fringe-error)
  (flycheck-define-error-level 'warning
			       :severity 1
			       :overlay-category 'flycheck-warning-overlay
			       :fringe-bitmap 'flycheck-fringe-bitmap-ball
			       :fringe-face 'flycheck-fringe-warning)
  (flycheck-define-error-level 'info
			       :severity 0
			       :overlay-category 'flycheck-info-overlay
			       :fringe-bitmap 'flycheck-fringe-bitmap-ball
			       :fringe-face 'flycheck-fringe-info))
   #+end_src

   Proselint is a syntax checker for English language. This defines a custom checker which will run in texty modes.

   Proselint is an external program, install it with =pip install proselint= for this to work.

   #+begin_src emacs-lisp
(flycheck-define-checker proselint
			 "A linter for prose."
			 :command ("proselint" source-inplace)
			 :error-patterns
			 ((warning line-start (file-name) ":" line ":" column ": "
				   (id (one-or-more (not (any " "))))
				   (message (one-or-more not-newline)
					    (zero-or-more "\n" (any " ") (one-or-more not-newline)))
				   line-end))
			 :modes (text-mode markdown-mode gfm-mode org-mode))
   #+end_src

* TeX

  From [[https://www.reddit.com/r/emacs/comments/cd6fe2/how_to_make_emacs_a_latex_ide/][this thread]]. See also, [[Org-Ref]]

  #+begin_src emacs-lisp
(use-package tex
  :ensure auctex
  :mode ("\\.tex\\'" . latex-mode)
  :config (progn
	    ;;            (setq TeX-PDF-mode t)
	    (setq TeX-source-correlate-mode t)
	    (setq TeX-source-correlate-method 'synctex)
	    (setq TeX-auto-save t)
	    (setq TeX-parse-self t)
	    (setq-default TeX-master nil)
	    (setq reftex-plug-into-AUCTeX t)
	    (pdf-tools-install)
	    (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
		  TeX-source-correlate-start-server t)
	    ;; Update PDF buffers after successful LaTeX runs
	    (add-hook 'TeX-after-compilation-finished-functions
		      #'TeX-revert-document-buffer)
	    (add-hook 'LaTeX-mode-hook
		      (lambda ()
			(reftex-mode t)
			(flyspell-mode t)))
	    ))
  #+end_src

* BibTeX
   
  Use biblatex rather than bibtex.
   
  #+begin_src emacs-lisp
(setq bibtex-dialect 'biblatex)
  #+end_src

** Autokey Format
  
  #+begin_src emacs-lisp
(setq bibtex-autokey-names 3
      bibtex-autokey-names-stretch 1
      bibtex-autokey-name-separator "-"
      bibtex-autokey-name-year-separator "-"
      bibtex-autokey-year-length 4
      bibtex-autokey-year-title-separator "-"
      bibtex-autokey-titleword-separator "-"
      bibtex-autokey-titlewords 5 		; default
      bibtex-autokey-titlewords-stretch 2	; default
      bibtex-autokey-titleword-length 5 	; default
      bibtex-autokey-titleword-ignore '("A" "An" "On" "The" "a" "an" "on" "the")
      )
  #+end_src

** Entry and Field Types
   
  The canonical way to create new bibtex entry and field types is to rewrite ~bibtex-biblatex-entry-alist~ and ~bibtex-biblatex-field-alist~ variables.
  - Advice for podcasts in APA style: https://tex.stackexchange.com/a/579758
  - See also http://tug.ctan.org/info/biblatex-cheatsheet/biblatex-cheatsheet.pdf
   
  #+begin_src emacs-lisp
(setq bibtex-biblatex-entry-alist
      '(("Article" "Article in Journal"
	 (("author")
	  ("title")
	  ("journaltitle")
	  ("year" nil nil 0)
	  ("date" nil nil 0))
	 nil
	 (("translator")
	  ("annotator")
	  ("commentator")
	  ("subtitle")
	  ("titleaddon")
	  ("editor")
	  ("editora")
	  ("editorb")
	  ("editorc")
	  ("journalsubtitle")
	  ("issuetitle")
	  ("issuesubtitle")
	  ("language")
	  ("origlanguage")
	  ("series")
	  ("volume")
	  ("number")
	  ("eid")
	  ("issue")
	  ("month")
	  ("pages")
	  ("version")
	  ("note")
	  ("issn")
	  ("addendum")
	  ("pubstate")
	  ("doi")
	  ("eprint")
	  ("eprintclass")
	  ("eprinttype")
	  ("url")
	  ("urldate")))
	("Book" "Single-Volume Book"
	 (("author")
	  ("title")
	  ("year" nil nil 0)
	  ("date" nil nil 0))
	 nil
	 (("editor")
	  ("editora")
	  ("editorb")
	  ("editorc")
	  ("translator")
	  ("annotator")
	  ("commentator")
	  ("introduction")
	  ("foreword")
	  ("afterword")
	  ("subtitle")
	  ("titleaddon")
	  ("maintitle")
	  ("mainsubtitle")
	  ("maintitleaddon")
	  ("language")
	  ("origlanguage")
	  ("volume")
	  ("part")
	  ("edition")
	  ("volumes")
	  ("series")
	  ("number")
	  ("note")
	  ("publisher")
	  ("location")
	  ("isbn")
	  ("chapter")
	  ("pages")
	  ("pagetotal")
	  ("addendum")
	  ("pubstate")
	  ("doi")
	  ("eprint")
	  ("eprintclass")
	  ("eprinttype")
	  ("url")
	  ("urldate")))
	("MVBook" "Multi-Volume Book"
	 (("author")
	  ("title")
	  ("year" nil nil 0)
	  ("date" nil nil 0))
	 nil
	 (("editor")
	  ("editora")
	  ("editorb")
	  ("editorc")
	  ("translator")
	  ("annotator")
	  ("commentator")
	  ("introduction")
	  ("foreword")
	  ("afterword")
	  ("subtitle")
	  ("titleaddon")
	  ("language")
	  ("origlanguage")
	  ("edition")
	  ("volumes")
	  ("series")
	  ("number")
	  ("note")
	  ("publisher")
	  ("location")
	  ("isbn")
	  ("pagetotal")
	  ("addendum")
	  ("pubstate")
	  ("doi")
	  ("eprint")
	  ("eprintclass")
	  ("eprinttype")
	  ("url")
	  ("urldate")))
	("InBook" "Chapter or Pages in a Book"
	 (("title")
	  ("year" nil nil 0)
	  ("date" nil nil 0))
	 (("author")
	  ("booktitle"))
	 (("bookauthor")
	  ("editor")
	  ("editora")
	  ("editorb")
	  ("editorc")
	  ("translator")
	  ("annotator")
	  ("commentator")
	  ("introduction")
	  ("foreword")
	  ("afterword")
	  ("subtitle")
	  ("titleaddon")
	  ("maintitle")
	  ("mainsubtitle")
	  ("maintitleaddon")
	  ("booksubtitle")
	  ("booktitleaddon")
	  ("language")
	  ("origlanguage")
	  ("volume")
	  ("part")
	  ("edition")
	  ("volumes")
	  ("series")
	  ("number")
	  ("note")
	  ("publisher")
	  ("location")
	  ("isbn")
	  ("chapter")
	  ("pages")
	  ("addendum")
	  ("pubstate")
	  ("doi")
	  ("eprint")
	  ("eprintclass")
	  ("eprinttype")
	  ("url")
	  ("urldate")))
	("BookInBook" "Book in Collection"
	 (("title")
	  ("year" nil nil 0)
	  ("date" nil nil 0))
	 (("author")
	  ("booktitle"))
	 (("bookauthor")
	  ("editor")
	  ("editora")
	  ("editorb")
	  ("editorc")
	  ("translator")
	  ("annotator")
	  ("commentator")
	  ("introduction")
	  ("foreword")
	  ("afterword")
	  ("subtitle")
	  ("titleaddon")
	  ("maintitle")
	  ("mainsubtitle")
	  ("maintitleaddon")
	  ("booksubtitle")
	  ("booktitleaddon")
	  ("language")
	  ("origlanguage")
	  ("volume")
	  ("part")
	  ("edition")
	  ("volumes")
	  ("series")
	  ("number")
	  ("note")
	  ("publisher")
	  ("location")
	  ("isbn")
	  ("chapter")
	  ("pages")
	  ("addendum")
	  ("pubstate")
	  ("doi")
	  ("eprint")
	  ("eprintclass")
	  ("eprinttype")
	  ("url")
	  ("urldate")))
	("SuppBook" "Supplemental Material in a Book"
	 (("title")
	  ("year" nil nil 0)
	  ("date" nil nil 0))
	 (("author")
	  ("booktitle"))
	 (("bookauthor")
	  ("editor")
	  ("editora")
	  ("editorb")
	  ("editorc")
	  ("translator")
	  ("annotator")
	  ("commentator")
	  ("introduction")
	  ("foreword")
	  ("afterword")
	  ("subtitle")
	  ("titleaddon")
	  ("maintitle")
	  ("mainsubtitle")
	  ("maintitleaddon")
	  ("booksubtitle")
	  ("booktitleaddon")
	  ("language")
	  ("origlanguage")
	  ("volume")
	  ("part")
	  ("edition")
	  ("volumes")
	  ("series")
	  ("number")
	  ("note")
	  ("publisher")
	  ("location")
	  ("isbn")
	  ("chapter")
	  ("pages")
	  ("addendum")
	  ("pubstate")
	  ("doi")
	  ("eprint")
	  ("eprintclass")
	  ("eprinttype")
	  ("url")
	  ("urldate")))
	("Booklet" "Booklet (Bound, but no Publisher)"
	 (("author" nil nil 0)
	  ("editor" nil nil 0)
	  ("title")
	  ("year" nil nil 1)
	  ("date" nil nil 1))
	 nil
	 (("subtitle")
	  ("titleaddon")
	  ("language")
	  ("howpublished")
	  ("type")
	  ("note")
	  ("location")
	  ("chapter")
	  ("pages")
	  ("pagetotal")
	  ("addendum")
	  ("pubstate")
	  ("doi")
	  ("eprint")
	  ("eprintclass")
	  ("eprinttype")
	  ("url")
	  ("urldate")))
	("Collection" "Single-Volume Collection"
	 (("editor")
	  ("title")
	  ("year" nil nil 0)
	  ("date" nil nil 0))
	 nil
	 (("editora")
	  ("editorb")
	  ("editorc")
	  ("translator")
	  ("annotator")
	  ("commentator")
	  ("introduction")
	  ("foreword")
	  ("afterword")
	  ("subtitle")
	  ("titleaddon")
	  ("maintitle")
	  ("mainsubtitle")
	  ("maintitleaddon")
	  ("language")
	  ("origlanguage")
	  ("volume")
	  ("part")
	  ("edition")
	  ("volumes")
	  ("series")
	  ("number")
	  ("note")
	  ("publisher")
	  ("location")
	  ("isbn")
	  ("chapter")
	  ("pages")
	  ("pagetotal")
	  ("addendum")
	  ("pubstate")
	  ("doi")
	  ("eprint")
	  ("eprintclass")
	  ("eprinttype")
	  ("url")
	  ("urldate")))
	("MVCollection" "Multi-Volume Collection"
	 (("editor")
	  ("title")
	  ("year" nil nil 0)
	  ("date" nil nil 0))
	 nil
	 (("editora")
	  ("editorb")
	  ("editorc")
	  ("translator")
	  ("annotator")
	  ("commentator")
	  ("introduction")
	  ("foreword")
	  ("afterword")
	  ("subtitle")
	  ("titleaddon")
	  ("language")
	  ("origlanguage")
	  ("edition")
	  ("volumes")
	  ("series")
	  ("number")
	  ("note")
	  ("publisher")
	  ("location")
	  ("isbn")
	  ("pagetotal")
	  ("addendum")
	  ("pubstate")
	  ("doi")
	  ("eprint")
	  ("eprintclass")
	  ("eprinttype")
	  ("url")
	  ("urldate")))
	("InCollection" "Article in a Collection"
	 (("author")
	  ("title")
	  ("year" nil nil 0)
	  ("date" nil nil 0))
	 (("booktitle"))
	 (("editor")
	  ("editora")
	  ("editorb")
	  ("editorc")
	  ("translator")
	  ("annotator")
	  ("commentator")
	  ("introduction")
	  ("foreword")
	  ("afterword")
	  ("subtitle")
	  ("titleaddon")
	  ("maintitle")
	  ("mainsubtitle")
	  ("maintitleaddon")
	  ("booksubtitle")
	  ("booktitleaddon")
	  ("language")
	  ("origlanguage")
	  ("volume")
	  ("part")
	  ("edition")
	  ("volumes")
	  ("series")
	  ("number")
	  ("note")
	  ("publisher")
	  ("location")
	  ("isbn")
	  ("chapter")
	  ("pages")
	  ("addendum")
	  ("pubstate")
	  ("doi")
	  ("eprint")
	  ("eprintclass")
	  ("eprinttype")
	  ("url")
	  ("urldate")))
	("SuppCollection" "Supplemental Material in a Collection"
	 (("author")
	  ("editor")
	  ("title")
	  ("year" nil nil 0)
	  ("date" nil nil 0))
	 (("booktitle"))
	 (("editora")
	  ("editorb")
	  ("editorc")
	  ("translator")
	  ("annotator")
	  ("commentator")
	  ("introduction")
	  ("foreword")
	  ("afterword")
	  ("subtitle")
	  ("titleaddon")
	  ("maintitle")
	  ("mainsubtitle")
	  ("maintitleaddon")
	  ("booksubtitle")
	  ("booktitleaddon")
	  ("language")
	  ("origlanguage")
	  ("volume")
	  ("part")
	  ("edition")
	  ("volumes")
	  ("series")
	  ("number")
	  ("note")
	  ("publisher")
	  ("location")
	  ("isbn")
	  ("chapter")
	  ("pages")
	  ("addendum")
	  ("pubstate")
	  ("doi")
	  ("eprint")
	  ("eprintclass")
	  ("eprinttype")
	  ("url")
	  ("urldate")))
	("Manual" "Technical Manual"
	 (("author" nil nil 0)
	  ("editor" nil nil 0)
	  ("title")
	  ("year" nil nil 1)
	  ("date" nil nil 1))
	 nil
	 (("subtitle")
	  ("titleaddon")
	  ("language")
	  ("edition")
	  ("type")
	  ("series")
	  ("number")
	  ("version")
	  ("note")
	  ("organization")
	  ("publisher")
	  ("location")
	  ("isbn")
	  ("chapter")
	  ("pages")
	  ("pagetotal")
	  ("addendum")
	  ("pubstate")
	  ("doi")
	  ("eprint")
	  ("eprintclass")
	  ("eprinttype")
	  ("url")
	  ("urldate")))
	("Misc" "Miscellaneous"
	 (("author" nil nil 0)
	  ("editor" nil nil 0)
	  ("title")
	  ("year" nil nil 1)
	  ("date" nil nil 1))
	 nil
	 (("subtitle")
	  ("titleaddon")
	  ("language")
	  ("howpublished")
	  ("type")
	  ("version")
	  ("note")
	  ("organization")
	  ("location")
	  ("date")
	  ("month")
	  ("year")
	  ("addendum")
	  ("pubstate")
	  ("doi")
	  ("eprint")
	  ("eprintclass")
	  ("eprinttype")
	  ("url")
	  ("urldate")))
	("Online" "Online Resource"
	 (("author" nil nil 0)
	  ("editor" nil nil 0)
	  ("title")
	  ("year" nil nil 1)
	  ("date" nil nil 1)
	  ("url"))
	 nil
	 (("subtitle")
	  ("titleaddon")
	  ("language")
	  ("version")
	  ("note")
	  ("organization")
	  ("date")
	  ("month")
	  ("year")
	  ("addendum")
	  ("pubstate")
	  ("urldate")))
	("Patent" "Patent"
	 (("author")
	  ("title")
	  ("number")
	  ("year" nil nil 0)
	  ("date" nil nil 0))
	 nil
	 (("holder")
	  ("subtitle")
	  ("titleaddon")
	  ("type")
	  ("version")
	  ("location")
	  ("note")
	  ("date")
	  ("month")
	  ("year")
	  ("addendum")
	  ("pubstate")
	  ("doi")
	  ("eprint")
	  ("eprintclass")
	  ("eprinttype")
	  ("url")
	  ("urldate")))
	("Periodical" "Complete Issue of a Periodical"
	 (("editor")
	  ("title")
	  ("year" nil nil 0)
	  ("date" nil nil 0))
	 nil
	 (("editora")
	  ("editorb")
	  ("editorc")
	  ("subtitle")
	  ("issuetitle")
	  ("issuesubtitle")
	  ("language")
	  ("series")
	  ("volume")
	  ("number")
	  ("issue")
	  ("date")
	  ("month")
	  ("year")
	  ("note")
	  ("issn")
	  ("addendum")
	  ("pubstate")
	  ("doi")
	  ("eprint")
	  ("eprintclass")
	  ("eprinttype")
	  ("url")
	  ("urldate")))
	("SuppPeriodical" "Supplemental Material in a Periodical"
	 (("author")
	  ("title")
	  ("journaltitle")
	  ("year" nil nil 0)
	  ("date" nil nil 0))
	 nil
	 (("translator")
	  ("annotator")
	  ("commentator")
	  ("subtitle")
	  ("titleaddon")
	  ("editor")
	  ("editora")
	  ("editorb")
	  ("editorc")
	  ("journalsubtitle")
	  ("issuetitle")
	  ("issuesubtitle")
	  ("language")
	  ("origlanguage")
	  ("series")
	  ("volume")
	  ("number")
	  ("eid")
	  ("issue")
	  ("month")
	  ("pages")
	  ("version")
	  ("note")
	  ("issn")
	  ("addendum")
	  ("pubstate")
	  ("doi")
	  ("eprint")
	  ("eprintclass")
	  ("eprinttype")
	  ("url")
	  ("urldate")))
	("Proceedings" "Single-Volume Conference Proceedings"
	 (("title")
	  ("year" nil nil 0)
	  ("date" nil nil 0))
	 nil
	 (("subtitle")
	  ("titleaddon")
	  ("maintitle")
	  ("mainsubtitle")
	  ("maintitleaddon")
	  ("eventtitle")
	  ("eventdate")
	  ("venue")
	  ("language")
	  ("editor")
	  ("volume")
	  ("part")
	  ("volumes")
	  ("series")
	  ("number")
	  ("note")
	  ("organization")
	  ("publisher")
	  ("location")
	  ("month")
	  ("isbn")
	  ("chapter")
	  ("pages")
	  ("pagetotal")
	  ("addendum")
	  ("pubstate")
	  ("doi")
	  ("eprint")
	  ("eprintclass")
	  ("eprinttype")
	  ("url")
	  ("urldate")))
	("MVProceedings" "Multi-Volume Conference Proceedings"
	 (("editor")
	  ("title")
	  ("year" nil nil 0)
	  ("date" nil nil 0))
	 nil
	 (("subtitle")
	  ("titleaddon")
	  ("eventtitle")
	  ("eventdate")
	  ("venue")
	  ("language")
	  ("volumes")
	  ("series")
	  ("number")
	  ("note")
	  ("organization")
	  ("publisher")
	  ("location")
	  ("month")
	  ("isbn")
	  ("pagetotal")
	  ("addendum")
	  ("pubstate")
	  ("doi")
	  ("eprint")
	  ("eprintclass")
	  ("eprinttype")
	  ("url")
	  ("urldate")))
	("InProceedings" "Article in Conference Proceedings"
	 (("author")
	  ("title")
	  ("year" nil nil 0)
	  ("date" nil nil 0))
	 (("booktitle"))
	 (("editor")
	  ("subtitle")
	  ("titleaddon")
	  ("maintitle")
	  ("mainsubtitle")
	  ("maintitleaddon")
	  ("booksubtitle")
	  ("booktitleaddon")
	  ("eventtitle")
	  ("eventdate")
	  ("venue")
	  ("language")
	  ("volume")
	  ("part")
	  ("volumes")
	  ("series")
	  ("number")
	  ("note")
	  ("organization")
	  ("publisher")
	  ("location")
	  ("month")
	  ("isbn")
	  ("chapter")
	  ("pages")
	  ("addendum")
	  ("pubstate")
	  ("doi")
	  ("eprint")
	  ("eprintclass")
	  ("eprinttype")
	  ("url")
	  ("urldate")))
	("Reference" "Single-Volume Work of Reference"
	 (("editor")
	  ("title")
	  ("year" nil nil 0)
	  ("date" nil nil 0))
	 nil
	 (("editora")
	  ("editorb")
	  ("editorc")
	  ("translator")
	  ("annotator")
	  ("commentator")
	  ("introduction")
	  ("foreword")
	  ("afterword")
	  ("subtitle")
	  ("titleaddon")
	  ("maintitle")
	  ("mainsubtitle")
	  ("maintitleaddon")
	  ("language")
	  ("origlanguage")
	  ("volume")
	  ("part")
	  ("edition")
	  ("volumes")
	  ("series")
	  ("number")
	  ("note")
	  ("publisher")
	  ("location")
	  ("isbn")
	  ("chapter")
	  ("pages")
	  ("pagetotal")
	  ("addendum")
	  ("pubstate")
	  ("doi")
	  ("eprint")
	  ("eprintclass")
	  ("eprinttype")
	  ("url")
	  ("urldate")))
	("MVReference" "Multi-Volume Work of Reference"
	 (("editor")
	  ("title")
	  ("year" nil nil 0)
	  ("date" nil nil 0))
	 nil
	 (("editora")
	  ("editorb")
	  ("editorc")
	  ("translator")
	  ("annotator")
	  ("commentator")
	  ("introduction")
	  ("foreword")
	  ("afterword")
	  ("subtitle")
	  ("titleaddon")
	  ("language")
	  ("origlanguage")
	  ("edition")
	  ("volumes")
	  ("series")
	  ("number")
	  ("note")
	  ("publisher")
	  ("location")
	  ("isbn")
	  ("pagetotal")
	  ("addendum")
	  ("pubstate")
	  ("doi")
	  ("eprint")
	  ("eprintclass")
	  ("eprinttype")
	  ("url")
	  ("urldate")))
	("InReference" "Article in a Work of Reference"
	 (("author")
	  ("editor")
	  ("title")
	  ("year" nil nil 0)
	  ("date" nil nil 0))
	 (("booktitle"))
	 (("editora")
	  ("editorb")
	  ("editorc")
	  ("translator")
	  ("annotator")
	  ("commentator")
	  ("introduction")
	  ("foreword")
	  ("afterword")
	  ("subtitle")
	  ("titleaddon")
	  ("maintitle")
	  ("mainsubtitle")
	  ("maintitleaddon")
	  ("booksubtitle")
	  ("booktitleaddon")
	  ("language")
	  ("origlanguage")
	  ("volume")
	  ("part")
	  ("edition")
	  ("volumes")
	  ("series")
	  ("number")
	  ("note")
	  ("publisher")
	  ("location")
	  ("isbn")
	  ("chapter")
	  ("pages")
	  ("addendum")
	  ("pubstate")
	  ("doi")
	  ("eprint")
	  ("eprintclass")
	  ("eprinttype")
	  ("url")
	  ("urldate")))
	("Report" "Technical or Research Report"
	 (("author")
	  ("title")
	  ("type")
	  ("institution")
	  ("year" nil nil 0)
	  ("date" nil nil 0))
	 nil
	 (("subtitle")
	  ("titleaddon")
	  ("language")
	  ("number")
	  ("version")
	  ("note")
	  ("location")
	  ("month")
	  ("isrn")
	  ("chapter")
	  ("pages")
	  ("pagetotal")
	  ("addendum")
	  ("pubstate")
	  ("doi")
	  ("eprint")
	  ("eprintclass")
	  ("eprinttype")
	  ("url")
	  ("urldate")))
	("Thesis" "PhD. or Master's Thesis"
	 (("author")
	  ("title")
	  ("type")
	  ("institution")
	  ("year" nil nil 0)
	  ("date" nil nil 0))
	 nil
	 (("subtitle")
	  ("titleaddon")
	  ("language")
	  ("note")
	  ("location")
	  ("month")
	  ("isbn")
	  ("chapter")
	  ("pages")
	  ("pagetotal")
	  ("addendum")
	  ("pubstate")
	  ("doi")
	  ("eprint")
	  ("eprintclass")
	  ("eprinttype")
	  ("url")
	  ("urldate")))
	("Unpublished" "Unpublished"
	 (("author")
	  ("title")
	  ("year" nil nil 0)
	  ("date" nil nil 0))
	 nil
	 (("subtitle")
	  ("titleaddon")
	  ("language")
	  ("howpublished")
	  ("note")
	  ("location")
	  ("isbn")
	  ("date")
	  ("month")
	  ("year")
	  ("addendum")
	  ("pubstate")
	  ("url")
	  ("urldate")))
	("Audio" "Audio"
	 (("author")
	  ("publisher")
	  ("title")
	  ("date"))
	  nil
	  (("maintitle")
	   ("number")
	   ("url")
	   ("urldate")
	   ("entrysubtype")
	   ("author+an:role")))))
  #+end_src

  #+begin_src emacs-lisp
(setq bibtex-biblatex-field-alist
      '(("abstract" "Abstract of the work")
	("addendum" "Miscellaneous bibliographic data")
	("afterword" "Author(s) of an afterword to the work")
	("annotation" "Annotation")
	("annotator" "Author(s) of annotations to the work")
	("author" "Author(s) of the title")
	("bookauthor" "Author(s) of the booktitle.")
	("bookpagination" "Pagination scheme of the enclosing work")
	("booksubtitle" "Subtitle related to the booktitle")
	("booktitle" "Title of the book")
	("booktitleaddon" "Annex to the booktitle")
	("chapter" "Chapter, section, or any other unit of a work")
	("commentator" "Author(s) of a commentary to the work")
	("date" "Publication date")
	("doi" "Digital Object Identifier")
	("edition" "Edition of a printed publication")
	("editor" "Editor(s) of the title, booktitle, or maintitle")
	("editora" "Secondary editor")
	("editorb" "Secondary editor")
	("editorc" "Secondary editor")
	("editortype" "Type of editorial role performed by the editor")
	("editoratype" "Type of editorial role performed by editora")
	("editorbtype" "Type of editorial role performed by editorb")
	("editorctype" "Type of editorial role performed by editorc")
	("eid" "Electronic identifier of an article")
	("eprint" "Electronic identifier of an online publication")
	("eprintclass" "Additional information related to the eprinttype")
	("eprinttype" "Type of eprint identifier")
	("eventdate" "Date of a conference or some other event")
	("eventtitle" "Title of a conference or some other event")
	("file" "Local link to an electronic version of the work")
	("foreword" "Author(s) of a foreword to the work")
	("holder" "Holder(s) of a patent")
	("howpublished" "Publication notice for unusual publications")
	("indextitle" "Title to use for indexing instead of the regular title")
	("institution" "Name of a university or some other institution")
	("introduction" "Author(s) of an introduction to the work")
	("isan" "International Standard Audiovisual Number of an audiovisual work")
	("isbn" "International Standard Book Number of a book.")
	("ismn" "International Standard Music Number for printed music")
	("isrn" "International Standard Technical Report Number")
	("issn" "International Standard Serial Number of a periodical.")
	("issue" "Issue of a journal")
	("issuesubtitle" "Subtitle of a specific issue of a journal or other periodical.")
	("issuetitle" "Title of a specific issue of a journal or other periodical.")
	("iswc" "International Standard Work Code of a musical work")
	("journalsubtitle" "Subtitle of a journal, a newspaper, or some other periodical.")
	("journaltitle" "Name of a journal, a newspaper, or some other periodical.")
	("label" "Substitute for the regular label to be used by the citation style")
	("language" "Language(s) of the work")
	("library" "Library name and a call number")
	("location" "Place(s) of publication")
	("mainsubtitle" "Subtitle related to the maintitle")
	("maintitle" "Main title of a multi-volume book, such as Collected Works")
	("maintitleaddon" "Annex to the maintitle")
	("month" "Publication month")
	("nameaddon" "Addon to be printed immediately after the author name")
	("note" "Miscellaneous bibliographic data")
	("number" "Number of a journal or the volume/number of a book in a series")
	("organization" "Organization(s) that published a work")
	("origdate" "Publication date of the original edition")
	("origlanguage" "Original publication language of a translated edition")
	("origlocation" "Location of the original edition")
	("origpublisher" "Publisher of the original edition")
	("origtitle" "Title of the original work")
	("pages" "Page number(s) or page range(s)")
	("pagetotal" "Total number of pages of the work.")
	("pagination" "Pagination of the work")
	("part" "Number of a partial volume")
	("publisher" "Name(s) of the publisher(s)")
	("pubstate" "Publication state of the work, e. g.,'in press'")
	("reprinttitle" "Title of a reprint of the work")
	("series" "Name of a publication series")
	("shortauthor" "Author(s) of the work, given in an abbreviated form")
	("shorteditor" "Editor(s) of the work, given in an abbreviated form")
	("shortjournal" "Short version or an acronym of the journal title")
	("shortseries" "Short version or an acronym of the series field")
	("shorttitle" "Title in an abridged form")
	("subtitle" "Subtitle of the work")
	("title" "Title of the work")
	("titleaddon" "Annex to the title")
	("translator" "Translator(s) of the work")
	("type" "Type of a manual, patent, report, or thesis")
	("url" " URL of an online publication.")
	("urldate" "Access date of the address specified in the url field")
	("venue" "Location of a conference, a symposium, or some other event")
	("version" "Revision number of a piece of software, a manual, etc.")
	("volume" "Volume of a multi-volume book or a periodical")
	("volumes" "Total number of volumes of a multi-volume work")
	("year" "Year of publication")
	("entrysubtype" "Fine-grained specification of type")
	("author+an:role" "Author roles as a list of comma-separated key-value pairs")))
  #+end_src

** BibTeX Completion Framework
    
   Use the BibTeX completion framework.
   
   #+begin_src emacs-lisp
(use-package helm-bibtex
  :bind
  ("C-c b" . helm-bibtex)
  ("C-c B" . helm-bibtex-with-local-bibliography)
  :config
  (setq
   bibtex-completion-bibliography
   '("~/ref/library.bib"
     "~/ref/news.bib"
     "~/ref/personal.bib"
     )
   bibtex-completion-library-path "~/ref/file/"
   bibtex-completion-notes-path "~/roam/"
   bibtex-completion-pdf-open-function 'org-open-file
   bibtex-completion-pdf-field "file"
   bibtex-completion-pdf-extension '(".pdf" ".epub")

   bibtex-completion-format-citation-functions '((org-mode . bibtex-completion-format-citation-org-cite)
						(latex-mode . bibtex-completion-format-citation-cite)
						(markdown-mode . bibtex-completion-format-citation-pandoc-citeproc)
						(python-mode . bibtex-completion-format-citation-sphinxcontrib-bibtex)
						(rst-mode . bibtex-completion-format-citation-sphinxcontrib-bibtex)
						(default . bibtex-completion-format-citation-default))
   
   )
  )
   #+end_src

* Org
  =orgmode= is the reason I started to use emacs in the first place. It has changed my life.
  Some config help:
  - [[https://emacs.stackexchange.com/a/17722]]
  Use the conventional global bindings
  #+begin_src emacs-lisp
(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)
  #+end_src
** Basic Config
   #+begin_src emacs-lisp
(use-package org-contrib
  :pin non-gnu)

;;  :hook ((auto-save . my-redo-all-agenda-buffers) (auto-save . org-save-all-org-buffers))
;;  (add-hook auto-save-hook . 'my-redo-all-agenda-buffers)

(use-package org
  :mode (("\\.org$" . org-mode))
  :ensure org-contrib
  :pin gnu
  :hook (auto-save . org-save-all-org-buffers)
  :config
  (progn
    (setq auth-sources '("~/.password-store/data/services/runbox.com/smtpmail_authinfo.gpg"))
    ;; (quote
    ;;  ("~/.authinfo" "~/.authinfo.gpg" "~/.netrc" "~/.smtpmail_authinfo.gpg")))
    (setq org-adapt-indentation t)

    ;; Make sure to use emacs to open pdfs in org
    (setq org-file-apps '((auto-mode . emacs)
			  (directory . emacs)
			  ;; ("\\.mm\\'" . default)
			  ;; ("\\.x?html?\\'" . default)
			  ("\\.pdf\\'" . emacs)))

    (setq org-startup-folded 'show2levels)
   #+end_src

** Functions

   A couple functions to ease reviews
   
  #+begin_src emacs-lisp
(defun my/org-agenda-view-week ()
  (org-agenda-list)
  (org-agenda-goto-today)
  (if (eq (buffer-local-value 'org-agenda-current-span (get-buffer "*Org Agenda(a)*")) 'week) nil
    (org-agenda-week-view))
  (org-agenda-redo)
  (goto-char (point-min)))

(defun my/org-log-check-week ()
  (org-agenda-list)
  (org-agenda-goto-today)
  (if (eq org-agenda-show-log nil)
      (org-agenda-log-mode))
  (org-agenda-show-clocking-issues)
  (if (eq (buffer-local-value 'org-agenda-current-span (get-buffer "*Org Agenda(a)*")) 'week) nil
    (org-agenda-week-view))
  (org-agenda-redo)
  (goto-char (point-min)))

(defun my/org-log-check-day ()
  (org-agenda-list)
  (org-agenda-goto-today)
  (if (eq org-agenda-show-log nil)
      (org-agenda-log-mode))
  (org-agenda-show-clocking-issues)
  (if (eq (buffer-local-value 'org-agenda-current-span (get-buffer "*Org Agenda(a)*")) 'day) nil
    (org-agenda-day-view))
  (org-agenda-goto-today)
  (org-agenda-redo)
  (goto-char (point-min)))
  #+end_src
      
** Preferences

   #+begin_src emacs-lisp
(setq org-checkbox-hierarchical-statistics nil)
   #+end_src

   #+begin_src emacs-lisp
(setq org-cite-global-bibliography '(
				     "~/ref/library.bib"
				     "~/ref/news.bib"
				     "~/ref/personal.bib"
				     ))
   #+end_src

   #+begin_src emacs-lisp
(setf (alist-get 'file org-link-frame-setup) 'find-file-other-frame)
   #+end_src

** Appearance

   org-level foregrounds
   
   #+begin_src emacs-lisp
(setq my-org-levels-gradient-odd (color-gradient (color-name-to-rgb "light sky blue") (color-name-to-rgb "black") 8))
(setq my-org-levels-gradient-even (color-gradient (color-name-to-rgb "pale green") (color-name-to-rgb "black") 8))

(set-face-attribute 'org-level-1 nil :foreground (apply #'color-rgb-to-hex (nth 0 my-org-levels-gradient-odd)))
(set-face-attribute 'org-level-2 nil :foreground (apply #'color-rgb-to-hex (nth 0 my-org-levels-gradient-even)))
(set-face-attribute 'org-level-3 nil :foreground (apply #'color-rgb-to-hex (nth 1 my-org-levels-gradient-odd)))
(set-face-attribute 'org-level-4 nil :foreground (apply #'color-rgb-to-hex (nth 1 my-org-levels-gradient-even)))
(set-face-attribute 'org-level-5 nil :foreground (apply #'color-rgb-to-hex (nth 2 my-org-levels-gradient-odd)))
(set-face-attribute 'org-level-6 nil :foreground (apply #'color-rgb-to-hex (nth 2 my-org-levels-gradient-even)))
(set-face-attribute 'org-level-7 nil :foreground (apply #'color-rgb-to-hex (nth 3 my-org-levels-gradient-even)))
(set-face-attribute 'org-level-8 nil :foreground (apply #'color-rgb-to-hex (nth 3 my-org-levels-gradient-odd)))
   #+end_src

   Make org-scheduled-today match org-level-1 face
   
   #+begin_src emacs-lisp
(set-face-attribute 'org-scheduled-today nil :foreground (apply #'color-rgb-to-hex (nth 0 my-org-levels-gradient-odd)))
   #+end_src

** Agenda Files and Interface

   #+begin_src emacs-lisp
;; agenda
(setq org-agenda-files '("~/org"))
(setq org-agenda-diary-file "~/org/calendar.org")
(setq org-agenda-include-diary t)
(setq org-agenda-sticky t)
(setq org-agenda-window-setup 'current-window)
(setq org-agenda-use-time-grid nil)
(setq org-habit-graph-column 65)
(setq org-habit-following-days 1)
(setq org-habit-preceding-days 28)
(setq org-habit-show-done-always-green t)

;; interface
(setq org-special-ctrl-a/e t)
(setq org-default-notes-file "~/org/inbox.org")
(setq org-refile-targets '((org-agenda-files :maxlevel . 9)))
   #+end_src

*** Rebuild Agenda Buffers Function
    From https://emacs.stackexchange.com/a/16328
    #+begin_src emacs-lisp
(defun my-redo-all-agenda-buffers ()
  (interactive)
  (dolist (buffer (buffer-list))
    (with-current-buffer buffer
      (when (derived-mode-p 'org-agenda-mode)
        (org-agenda-redo t)))))
    #+end_src

*** Colorize and Height-Space Logbook in Agenda

    #+begin_src emacs-lisp
;; ;; work with org-agenda dispatcher [c] "Today Clocked Tasks" to view today's clocked tasks.
;; (defun org-agenda-log-mode-colorize-block ()
;;   "Set different line spacing based on clock time duration."
;;   (save-excursion
;;     (let* ((colors (cl-case (alist-get 'background-mode (frame-parameters))
;;                                  ('light
;;                                   (list "#F6B1C3" "#FFFF9D" "#BEEB9F" "#ADD5F7"))
;;                                  ('dark
;;                                   (list "#aa557f" "DarkGreen" "DarkSlateGray" "DarkSlateBlue"))))
;;            pos
;;            duration)
;;       (nconc colors colors)
;;       (goto-char (point-min))
;;       (while (setq pos (next-single-property-change (point) 'duration))
;;         (goto-char pos)
;;         (when (and (not (equal pos (point-at-eol)))
;;                    (setq duration (org-get-at-bol 'duration)))
;;           ;; larger duration bar height
;;           (let ((line-height (if (< duration 15) 1.0 (+ 0.5 (/ duration 30))))
;;                 (ov (make-overlay (point-at-bol) (1+ (point-at-eol)))))
;;             (overlay-put ov 'face `(:background ,(car colors) :foreground "black"))
;;             (setq colors (cdr colors))
;;             (overlay-put ov 'line-height line-height)
;;             (overlay-put ov 'line-spacing (1- line-height))))))))

;; (add-hook 'org-agenda-finalize-hook #'org-agenda-log-mode-colorize-block)
    #+end_src

** Capture Templates

   #+begin_src emacs-lisp
(setq org-capture-templates
      '(("t" "Todo" entry (file org-default-notes-file)
	 "* TODO %?\n %i\n %a\n")
	("j" "Journal" entry (file+olp+datetree "~/org/journal.org")
	 "* %U\n %?")
	("d" "Daily Summary" entry (file+olp+datetree "~/org/journal.org")
	 "* %U\n** Summary %u\n   %?")
	("w" "Weekly Summary" entry (file+olp+datetree "~/org/journal.org")
	 "* %U\n** Summary %(format-time-string \"%Y-W%V\")\n   %?")))
   #+end_src

** Todo Keywords
   Potential reworking: Along with READ, VIEW and HEAR could form file-specific keywords for a media list.
   #+begin_src emacs-lisp
(setq org-todo-keywords
      '((sequence
	 "TODO(t)"
	 "VERB(v)"
	 "ATTN(a)"
	 "IDEA(i)"
	 "READ(R)"
	 ;;	 "PLAN(p)"
	 "REDO(r)"
	 "WAIT(w)"
	 "HOLD(h)"
	 "|"
	 "DONE(d)"
	 "SKIP(s)"
	 "KILL(k)")))

(setq org-todo-keyword-faces
      '(("TODO" . "forest green")
	("VERB" . "firebrick")
	("IDEA" . "orchid")
	("READ" . "blue violet")
	("ATTN" . "turquoise")
	;;	("PLAN" . "dark orange")	
	("REDO" . "dodger blue")
	("WAIT" . "goldenrod")
	("HOLD" . "sienna")
	("DONE" . "dark olive green")
	("SKIP" . "light steel blue")
	("KILL" . "dim grey")))
   #+end_src

** Clocking and Logging
   #+begin_src emacs-lisp
(setq org-clock-continuously t)
(setq org-log-into-drawer t)
(setq org-log-done 'time)
;; (org-clock-persistence-insinuate)
(setq org-clock-persist t)
(setq org-clock-persist-file "~/org/org-clock-save.el")
   #+end_src

** LaTeX

   Credit https://kitchingroup.cheme.cmu.edu/blog/2016/11/06/Justifying-LaTeX-preview-fragments-in-org-mode/
   #+begin_src emacs-lisp
;; specify the justification you want
(plist-put org-format-latex-options :justify 'center)

(defun org-justify-fragment-overlay (beg end image imagetype)
  "Adjust the justification of a LaTeX fragment.
The justification is set by :justify in
`org-format-latex-options'. Only equations at the beginning of a
line are justified."
  (cond
   ;; Centered justification
   ((and (eq 'center (plist-get org-format-latex-options :justify)) 
         (= beg (line-beginning-position)))
    (let* ((img (create-image image 'imagemagick t))
           (width (car (image-size img)))
           (offset (floor (- (/ (window-text-width) 2) (/ width 2)))))
      (overlay-put (ov-at) 'before-string (make-string offset ? ))))
   ;; Right justification
   ((and (eq 'right (plist-get org-format-latex-options :justify)) 
         (= beg (line-beginning-position)))
    (let* ((img (create-image image 'imagemagick t))
           (width (car (image-display-size (overlay-get (ov-at) 'display))))
           (offset (floor (- (window-text-width) width (- (line-end-position) end)))))
      (overlay-put (ov-at) 'before-string (make-string offset ? ))))))

(defun org-latex-fragment-tooltip (beg end image imagetype)
  "Add the fragment tooltip to the overlay and set click function to toggle it."
  (overlay-put (ov-at) 'help-echo
               (concat (buffer-substring beg end)
                       "mouse-1 to toggle."))
  (overlay-put (ov-at) 'local-map (let ((map (make-sparse-keymap)))
                                    (define-key map [mouse-1]
                                      `(lambda ()
                                         (interactive)
                                         (org-remove-latex-fragment-image-overlays ,beg ,end)))
                                    map)))

;; advise the function to a
(advice-add 'org--format-latex-make-overlay :after 'org-justify-fragment-overlay)
(advice-add 'org--format-latex-make-overlay :after 'org-latex-fragment-tooltip)
   #+end_src

   Credit https://emacs.stackexchange.com/a/3643

   #+begin_src emacs-lisp
(defun update-org-latex-fragments ()
  (org-latex-preview '(64))
  (plist-put org-format-latex-options :scale text-scale-mode-amount)
  (org-latex-preview '(16)))
(add-hook 'text-scale-mode-hook 'update-org-latex-fragments)
   #+end_src
   
** Structure Templates
   The [[*Org-Babel][Org-Babel]] section contains additional additions to org-structure-template-alist
   #+begin_src emacs-lisp
(add-to-list 'org-structure-template-alist '("n" . "note"))
   #+end_src

** close parens
   #+begin_src emacs-lisp
))
   #+end_src

** Interface Packages

   [[https://github.com/sabof/org-bullets/blob/master/org-bullets.el][better org-bullets]] has some unicode suggestions

   #+begin_src emacs-lisp
(use-package org-habit :ensure f
  :after org)
(use-package org-checklist :ensure f
  :after org)
(use-package org-bullets 
  ;;  :after org
  ;;  :ensure t
  ;;  :init
  ;;  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  :hook
  (org-mode . org-bullets-mode)
  :config
  (setq org-bullets-bullet-list '("●" "○" "◆" "◇")))

;; (use-package org-timeline :ensure f
;;   :after org)
;; (add-hook 'org-agenda-finalize-hook 'org-timeline-insert-timeline :append)
   #+end_src

   [[https://github.com/dfeich/org-clock-convenience][org-clock-convenience]] provides functions for remote editing the LOGBOOK from the Agenda
   
   #+begin_src emacs-lisp
(use-package org-clock-convenience
  :ensure t
  :after org
  :bind (:map org-agenda-mode-map
   	   ("<S-up>" . org-clock-convenience-timestamp-up)
   	   ("<S-down>" . org-clock-convenience-timestamp-down)
   	   ("o" . org-clock-convenience-fill-gap)
   	   ("e" . org-clock-convenience-fill-gap-both)))
   #+end_src

** Org-Noter
   [[https://github.com/weirdNox/org-noter][Org-noter]] is a document annotation package compatible with DocView, [[*PDF-Tools][PDF-Tools]], and [[*Nov.el][Nov.el]].
   #+begin_src emacs-lisp
(use-package org-noter
  :after (:any org pdf-view nov)
  :config
  (setq org-noter-notes-search-path '("~/ref/")
	org-noter-always-create-frame nil)
  :bind ("C-c N" . org-noter)
  )
   #+end_src
   
** Org-Roam
   
   [[https://www.orgroam.com/][Org-roam]] is note-taking system based on Roam. The [[info:org-roam][user manual]] is online.
   
   #+begin_src emacs-lisp
(setq org-roam-v2-ack t)
(use-package org-roam
  :ensure t
  :custom
  (org-roam-directory "~/roam")
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n g" . org-roam-graph)
         ("C-c n i" . org-roam-node-insert)
         ("C-c n c" . org-roam-capture))
  :config
  (setq org-roam-file-exclude-regexp ".stversions")
  (org-roam-db-autosync-mode)
  (org-roam-setup)
  (org-roam-bibtex-mode +1)
  (setq org-roam-capture-templates
	'(("d" "default" plain "%?"
	   :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
			      "#+title: ${title}\n")
	   :unnarrowed t)
	  ("a" "article" plain (file "~/org/template.org")
	   :target (file "${citekey}.org")
	   :empty-lines-after 1
	   :unarrowed t))))
   #+end_src

*** org-roam-ui

    #+begin_src emacs-lisp
(use-package org-roam-ui
  ;; :straight
  ;;   (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
  ;;   :after org-roam
;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
;;         a hookable mode anymore, you're advised to pick something yourself
;;         if you don't care about startup time, use
;;  :hook (after-init . org-roam-ui-mode)
  :after org
  :delight
  :config
  (setq warning-minimum-log-level :error) ; local bibliographies are not read in bibtex-completion; suppress warnings until I decide on a solution or better design approach
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t))
    #+end_src

*** Org-Roam-BibTeX

    [[https://github.com/org-roam/org-roam-bibtex][=org-roam-bibtex=]] is a library which offers a tighter integration between [[*Org-Roam][Org-Roam]], [[*BibTeX][Helm-BibTeX]], and [[*Org-Ref][Org-Ref]]. Use org-cite reference format, set manually, as the ='org-cite= symbol uses the "@citekey" syntax rather than "[cite:@citekey]".
    
    #+begin_src emacs-lisp
(use-package org-roam-bibtex
  :after org-roam
  :delight
  :config
  (setq orb-roam-ref-format "[cite:@%s]"))
    #+end_src

** COMMENT Org-Brain
   Presently causing problems with helm or org-ref or both or something else: Invalid function: helm-build-sync-source
   #+begin_src emacs-lisp :tangle no
(use-package org-brain
  :config
  (setq org-brain-path "~/org/brain/")
  (setq org-id-track-globally t)
  (setq org-id-locations-file "~/.emacs.d/.org-id-locations")
  (setq org-brain-visualize-default-choices 'all)
  (setq org-brain-title-max-length 12)
  (setq org-brain-include-file-entries nil
	org-brain-file-entries-use-title nil))
   #+end_src

** Org-Babel

   ob-async enables asynchronous execution of org-babel src blocks. Simply add the keyword =:async= to the header-args of any org-babel src block and invoke =ob-async-org-babel-execute-src-block=.
   #+begin_src emacs-lisp
(use-package ob-async)
   #+end_src

   
   #+begin_src emacs-lisp
(setq org-src-preserve-indentation t)

(use-package jupyter
  :after org)

(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (python . t)
   (latex . t)
   (ledger . t)
   (shell . t)
   (sql . t)
   (jupyter . t))) ;; jupyter must be the final element in the list

;; set all code be safe
(setq org-confirm-babel-evaluate nil)

;; ;; all python code be safe
;; (defun my-org-confirm-babel-evaluate (lang body)
;; (not (string= lang "python")))
;; (setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)

;; update images in the buffer after evaluation
(add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images 'append)

;; jupyter uses its own async
;; https://github.com/nnicandro/emacs-jupyter#integration-with-ob-async
(setq ob-async-no-async-languages-alist '("jupyter-python"))

;; jupyter block header arguments for single session and kernel
(setq org-babel-default-header-args:jupyter-python '((:async . "yes")
						     (:session . "py")
						     (:kernel . "python3")))

;; additional org block templates
(add-to-list 'org-structure-template-alist '("j" . "src jupyter-python"))
(add-to-list 'org-structure-template-alist '("L" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("p" . "src python"))
(add-to-list 'org-structure-template-alist '("S" . "src shell"))
   #+end_src

   Set code block appearance as per example at [[info:org#Editing Source Code][org#Editing Source Code]]
   #+begin_src emacs-lisp
;; code block appearance

(require 'color)
(set-face-attribute 'org-block nil
		    :background
		    (color-darken-name
                     (face-attribute 'default :background) 4))

(set-face-attribute 'org-block-begin-line nil
		    :background
		    (color-darken-name
                     (face-attribute 'default :background) 2)
		    :underline nil)

(set-face-attribute 'org-block-end-line nil
		    :background
		    (color-darken-name
                     (face-attribute 'default :background) 2)
		    :overline nil)

;; (setq org-src-block-faces '(("emacs-lisp" nil)
;;                             ("python" nil)))
   #+end_src
   
** COMMENT Org-Ref
   [[https://github.com/jkitchin/org-ref][org-ref]] is a citation management system for org. [[https://github.com/jkitchin/org-ref/blob/master/org-ref.org][The org-ref manual]] is an additional resource. See also [[TeX]] and [[*Org-Roam-BibTeX][Org-Roam-BibTeX]]. Credit [[https://rgoswami.me/posts/org-note-workflow/][Rohit Goswami]] and surely others.

   #+begin_src emacs-lisp :tangle no
(use-package org-ref
  :after org
;;  :requires citeproc
  )

;; (use-package org-ref-isbn :ensure f
;;   :requires org-ref)
;; (use-package org-ref-pdf :ensure f
;;   :requires org-ref)
;; (use-package doi-utils :ensure f
;;   :requires org-ref)
   #+end_src

* Extras

** Web

   #+begin_src emacs-lisp
;; open links in eww
(setq browse-url-browser-function 'eww-browse-url)

;; set eww download directory to home
(setq eww-download-directory "~")
   #+end_src

** PDF-Tools

   [[https://github.com/politza/pdf-tools][=pdf-tools=]]
   #+begin_src emacs-lisp
(use-package pdf-tools
  :config
  (pdf-tools-install)
;  (add-hook 'pdf-tools-enabled-hook 'pdf-view-midnight-minor-mode)
  (setq-default pdf-view-display-size 'fit-width)
  (setq pdf-annot-activate-created-annotations t)
  (setq pdf-view-midnight-colors (cons (face-foreground 'default)  (face-background 'default)))
  (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
  (define-key pdf-view-mode-map (kbd "C-r") 'isearch-backward))
   #+end_src

** Nov.el
   [[https://depp.brause.cc/nov.el/][Nov.el]] is a major mode for reading EPUB documents. The config settings below are copy-pasted from the homepage.
   #+begin_src emacs-lisp
(use-package nov
  :config
  (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
   #+end_src
   Default font
   To change the default font, use M-x customize-face RET variable-pitch, pick a different family, save and apply. If you dislike globally customizing that face, add the following to your init file:
   #+begin_src emacs-lisp
(defun my-nov-font-setup ()
  (face-remap-add-relative 'variable-pitch :family "Liberation Serif"
                           :height 1.0))
(add-hook 'nov-mode-hook 'my-nov-font-setup))
   #+end_src
   To completely disable the variable pitch font, customize nov-variable-pitch to nil. Text will be displayed with the default face instead which should be using a monospace font.

   Text width
   By default text is filled by the window width. You can customize nov-text-width to a number of columns to change that:
   #+begin_src emacs-lisp
;;  (setq nov-text-width 80)
   #+end_src
   It's also possible to set it to t to inhibit text filling, this can be used in combination with visual-line-mode and packages such as visual-fill-column to implement more flexible filling:
   #+begin_src emacs-lisp
;;  (setq nov-text-width t)
;;  (setq visual-fill-column-center-text t)
;;  (add-hook 'nov-mode-hook 'visual-line-mode)
;;  (add-hook 'nov-mode-hook 'visual-fill-column-mode)
;;  )
   #+end_src
** Ebib
   [[http://joostkremers.github.io/ebib/][ebib]] is a BibTeX database manager.
   #+begin_src emacs-lisp
(use-package ebib
  :bind ("C-c e" . ebib)
  :config
  (setq ebib-bibtex-dialect 'biblatex
	ebib-preload-bib-files '("~/ref/library.bib" "~/ref/news.bib" "~/ref/personal.bib")
	ebib-file-search-dirs '("~/ref/file")
	ebib-file-associations nil
	ebib-notes-directory "~/roam"))
   #+end_src

** Email

   mu4e is an email client for Emacs based on mu (maildir-utils). 

*** COMMENT Dependencies
    Install mu4e and mbsync (isync) if they're not already installed. mbsync downloads and syncs emails from an email server into a local maildir. The file .mbsyncrc is the configuration for mbsync. mu indexes the local maildir and provides a CLI to search.
    #+begin_src shell :tangle no
sudo apt install isync -f 
sudo apt install mu4e
    #+end_src

    #+begin_src shell :tangle no
mbsync -a
mu index --maildir=~/.maildir
    #+end_src

*** mu4e Settings

    The mu4e config below is copied and adapted from [[https://www.reddit.com/r/emacs/comments/bfsck6/mu4e_for_dummies/][this reddit post]]. 
    #+begin_src emacs-lisp
(use-package org-mime
  :after (org mu4e))

(use-package smtpmail
  :after mu4e

  :config
  ;;set up queue for offline email
  ;;use mu mkdir  ~/.maildir/acc/queue to set up first
  (setq smtpmail-queue-mail nil)  ;; start in normal mode
  )

(use-package mu4e
  :commands (mu4e)
  :load-path "/usr/share/emacs/site-lisp/mu4e/"
  :bind ("C-c m" . mu4e)
  :hook (
	 (mu4e-view-mode . visual-line-mode)

	 ;; <tab> to navigate to links, <RET> to open them in browser
	 (mu4e-view-mode . (lambda()
			     ;; try to emulate some of the eww key-bindings
			     ;; :bind within :hook?
			     (local-set-key (kbd "<RET>") 'mu4e~view-browse-url-from-binding)
			     (local-set-key (kbd "<tab>") 'shr-next-link)
			     (local-set-key (kbd "<backtab>") 'shr-previous-link))))

  :init
  ;; from https://www.reddit.com/r/emacs/comments/bfsck6/mu4e_for_dummies/elgoumx
  (add-hook 'mu4e-headers-mode-hook (defun my/mu4e-change-headers ()
				      (interactive)
				      (setq mu4e-headers-fields
					    `((:human-date . 25) ;; alternatively, use :date
					      (:flags . 6)
					      (:from . 22)
					      (:subject . ,(- (window-body-width) 70)) ;; alternatively, use :thread-subject
					      (:size . 7)))))
  
  ;; if you use date instead of human-date in the above, use this setting
  ;; give me ISO(ish) format date-time stamps in the header list
  ;; (setq mu4e-headers-date-format "%Y-%m-%d %H:%M")

  ;; spell check
  (add-hook 'mu4e-compose-mode (defun my-do-compose-stuff ()
				 "My settings for message composition."
				 (visual-line-mode)
				 (org-mu4e-compose-org-mode)
				 (use-hard-newlines -1)
				 (flyspell-mode)))

  :config
  ;; make mu4e the emacs' default mail client
  (setq mail-user-agent 'mu4e-user-agent)
  
  ;; rename files when moving
  ;; NEEDED FOR MBSYNC
  (setq mu4e-change-filenames-when-moving t)
  ;; directories
  (setq mu4e-maildir (expand-file-name "~/.maildir"))
  (setq mu4e-attachment-dir  "~/")
  
  ;; get mail
  (setq mu4e-get-mail-command "mbsync -a"
	;;      mu4e-html2text-command "html2text -utf8 -width 72" ;;using the default mu4e-shr2text
	mu4e-view-prefer-html t
	mu4e-update-interval 600
	mu4e-headers-auto-update t
	mu4e-compose-signature-auto-include nil
	mu4e-compose-format-flowed t)

  ;; Disable indexing messages in minibuffer
  (setq mu4e-hide-index-messages t)

  ;; to view selected message in the browser, no signin, just html mail
  (add-to-list 'mu4e-view-actions
	       '("ViewInBrowser" . mu4e-action-view-in-browser) t)

  ;; from vxlabs config
  ;; show full addresses in view message (instead of just names)
  ;; toggle per name with M-RET
  (setq mu4e-view-show-addresses 't)
  ;; don't save message to Sent Messages, IMAP takes care of this
  ;; (setq mu4e-sent-messages-behavior 'delete)

  ;; enable inline images
  (setq mu4e-view-show-images t)
  ;; use imagemagick, if available
  (when (fboundp 'imagemagick-register-types)
    (imagemagick-register-types))

  ;; fancy Unicode rather than plan ASCII
  (setq mu4e-use-fancy-chars t)
  
  ;; every new email composition gets its own frame!
  (setq mu4e-compose-in-new-frame t)

  (setq message-kill-buffer-on-exit t)
  
  ;; don't reply to self
  ;; must add user-mail-address for mu4e < 1.4
  ;; otherwise use mu init --my-address=...
  (setq mu4e-compose-dont-reply-to-self t)
  (setq mu4e-user-mail-address-list '("first@address.org" "second@address.com"))
  
  ;; don't ask when quitting
  (setq mu4e-confirm-quit nil)

  ;; start mu4e in the background
  (mu4e t))

(use-package org-mu4e
  :after (org mu4e)
  :load-path "/usr/share/emacs/site-lisp/mu4e/"
  :config
  ;; convert org mode to HTML automatically
  (setq org-mu4e-convert-to-html t)

  ;; store link to message if in header view, not to header query
  (setq org-mu4e-link-query-in-headers-mode nil)

  :bind (
	 ;; capture from mu to org inbox
	 :map mu4e-headers-mode-map  ("C-c c" . org-mu4e-store-and-capture)
	 :map mu4e-view-mode-map ("C-c c" . org-mu4e-store-and-capture))
  )
    #+end_src

*** Accounts
    Accounts are managed as mu4e contexts. Each context is a separate account.
    #+begin_src emacs-lisp
(use-package mu4e-context
  :load-path "/usr/share/emacs/site-lisp/mu4e/"
  :config
  (setq mu4e-context-policy 'pick-first)
  (setq mu4e-compose-context-policy 'always-ask)
  (setq mu4e-contexts
	(list
    #+end_src

**** first@address.org
     #+begin_src emacs-lisp
(make-mu4e-context
 :name "first"
 :enter-func (lambda () (mu4e-message "Entering context first@address.org"))
 :leave-func (lambda () (mu4e-message "Leaving context first@address.org"))
 :vars '((user-mail-address . "first@address.org")
	 (user-full-name . "First Name")
	 (mu4e-sent-folder . "/first/sent")
	 (mu4e-drafts-folder . "/first/drafts")
	 (mu4e-refile-folder . "/first/archive")
	 (mu4e-trash-folder . "/first/trash")
	 (mu4e-compose-format-flowed . t)
	 (smtpmail-queue-dir . "~/.maildir/first/queue/cur")
	 (message-send-mail-function . smtpmail-send-it)
	 (smtpmail-smtp-user . (concat "first@address.org"))
	 (smtpmail-starttls-credentials . (("mail.server.com" 587 nil nil)))
	 (smtpmail-auth-credentials . (expand-file-name "~/<.auth>/smtpmail_authinfo.gpg"))
	 (smtpmail-default-smtp-server . "mail.server.com")
	 (smtpmail-smtp-server . "mail.server.com")
	 (smtpmail-smtp-service . 587)
	 (smtpmail-debug-info . t)
	 (smtpmail-debug-verbose . t)
	 (mu4e-maildir-shortcuts . (("/first/INBOX"   . ?i)
				    ("/first/sent"    . ?s)
				    ("/first/trash"   . ?t)
				    ("/first/archive" . ?a)
				    ("/first/drafts"  . ?d)
				    ))))
     #+end_src

**** second@address.com
     #+begin_src emacs-lisp
(make-mu4e-context
 :name "second"
 :enter-func (lambda () (mu4e-message "Entering context second@address.com"))
 :leave-func (lambda () (mu4e-message "Leaving context second@address.com"))
 :vars '((user-mail-address . "second@address.com")
	 (user-full-name . "Second Name")
	 (mu4e-sent-folder . "/second/sent")
	 (mu4e-drafts-folder . "/second/drafts")
	 (mu4e-refile-folder . "/second/archive")
	 (mu4e-trash-folder . "/second/trash")
	 (mu4e-compose-format-flowed . t)
	 (smtpmail-queue-dir . "~/.maildir/second/queue/cur")
	 (message-send-mail-function . smtpmail-send-it)
	 (smtpmail-smtp-user . (concat "second@address.com"))
	 (smtpmail-starttls-credentials . (("mail.server.com" 587 nil nil)))
	 (smtpmail-auth-credentials . (expand-file-name "~/<.auth>/smtpmail_authinfo.gpg"))
	 (smtpmail-default-smtp-server . "mail.server.com")
	 (smtpmail-smtp-server . "mail.server.com")
	 (smtpmail-smtp-service . 587)
	 (smtpmail-debug-info . t)
	 (smtpmail-debug-verbose . t)
	 (mu4e-maildir-shortcuts . (("/second/INBOX"   . ?i)
				    ("/second/sent"    . ?s)
				    ("/second/trash"   . ?t)
				    ("/second/archive" . ?a)
				    ("/second/drafts"  . ?d)
				    ))))
     #+end_src


**** Close Parens
     #+begin_src emacs-lisp
)))
     #+end_src

** Feeds

   #+begin_src emacs-lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Elfeed
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(use-package elfeed
  :bind ("C-x w" . elfeed))

(use-package elfeed-org
  :after elfeed
  :init (elfeed-org)
  :config
  (setq rmh-elfeed-org-files (list "~/org/feeds.org")))
   #+end_src

** EMMS
   
   #+begin_src emacs-lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Media
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(use-package emms
  :init
  (emms-all)
  (emms-default-players)
  :config
  (setq emms-player-list '(emms-player-mpv)))
   #+end_src

** CSV
   #+begin_src emacs-lisp
(use-package csv-mode)
   #+end_src
   
** Flashcards

   #+begin_src emacs-lisp
(use-package anki-editor
  :after org
  :config
  (setq anki-editor-create-decks t
	anki-editor-org-tags-as-anki-tags t))
   #+end_src

** COMMENT Translate

   Update for use-package or drop?

   #+begin_src emacs-lisp
;; Google Translate
(require 'google-translate)
(require 'google-translate-smooth-ui)
(global-set-key (kbd "C-c t") 'google-translate-smooth-translate)
(setq google-translate-translation-directions-alist
      '(("iw" . "en") ("en" . "iw") ("fr" . "en") ("en" . "fr")))
   #+end_src
* Dashboards
** GTD
   
   Make a function to create a frame with my standard GTD dashboard.
   
   #+begin_src emacs-lisp :results none
(defun my/frame-gtd ()
  "Create my GTD Dashboard"
  (interactive)
  (make-frame '((name . "gtd")))
  (select-frame-by-name "gtd")
  (split-window-horizontally)
  (split-window-vertically)
  (org-agenda-list 1)
  (select-window (next-window))
  (org-todo-list "VERB")
  (set-window-buffer (select-window (next-window)) "org.org")
  (my-redo-all-agenda-buffers))

(global-set-key (kbd "s-g") 'my/frame-gtd)

(my/frame-gtd)
;; (select-frame (select-frame-by-name "gtd"))
   #+end_src
   
* Appearance Continued

  For an unknown reason this works at the end of file but not at [[*Appearance][Appearance]]
  #+begin_src emacs-lisp
(set-cursor-color my/default-cursor-region-color)
  #+end_src

   Tag alignment. Is there a way to make this dynamic? Perhaps hook to window opens and resizes? Is that a good idea (since it is a change in the text itself)?

   #+begin_src emacs-lisp
(setq org-tags-column (- 4 (window-width)))
   #+end_src
   
  
